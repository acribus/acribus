(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{187:function(t,s,r){"use strict";r.r(s);var e=r(0),a=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"acribus-是什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#acribus-是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" Acribus 是什么")]),r("p",[t._v("Acribus 是一种面向资源的编程方式及其规范，该项目是这种规范的 Vue 实现。")]),r("h1",{attrs:{id:"为什么-acribus"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么-acribus","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么 Acribus")]),r("p",[t._v("Acribus 不是另一个 element-ui 或 ant design。")]),r("p",[t._v("与面向 DOM 和面向 Component不同，Acribus定义了更高一级抽象：它的关注点在页面要展示、操作的数据种类，以及各个数据集之间的关系（从属还是并列），我们称为面向资源。")]),r("p",[t._v("面向组件的编程方式不是用于取代面向 DOM，Acribus 也不是用于取代以上两种。\n更高级别抽象往往意味着灵活性的丧失，关键是识别具体的业务场景，在性能、灵活性和开发时间之前权衡。")]),r("p",[t._v("Acribus 适用于资源展示和操作密集型的中后台项目，整个 API 设计坚持约定优于配置，节省开发的同时最大程度保留灵活性。")])])}],!1,null,null,null);s.default=a.exports}}]);